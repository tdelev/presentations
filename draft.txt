### Dockerizing Spring Web Application

Tomche Delev

@tdelev
tdelev.github.io
https://github.com/tdelev/presentations/docker/

Agenda

* What the heck is Docker?
* How the containers changed the world?
* Docker intro
* Ship the containers in five steps

# My goal hacking with docker

To deploy my Spring Boot application along with the PostgresSQL database server.

# What is Docker?

According the [official docs](http://jekyllrb.com/docs/posts/) Docker is a platform 
that can be used to:
 - build
 - ship 
 - and run applications. 

In the center of the Docker is the idea of container.

How were the goods transpored?

How are the goods transpored NOW?

The container has become the standardized API of cargo.

Just as the phisical ship containers are used to tranport goods, the 
virtual container can be used to ship and deploy any service. 

One way of using containers to deploy apps or services is to package it as VM image. Some of
the downsides of VM aproach are:

 - no guaranty of virtualized envirnoment
 - heavyweight technology (not practical to deploy more than a couple of VMs on developer laptop)
 - slow and IO intensive building and starting process
 - deployment costs on IaaS such as AWS EC2 

## Docker introduction

[Docker](https://www.docker.com/) is a new way to containerize applications that is becomingly increasingly popular. It allows you to package a microservice in a standardized portable format that’s independent of the technology used to implement the service. At runtime it provides a high degree of isolation between different services. 

However, unlike virtual machines, Docker containers are extremely lightweight and as a result can be built and started extremely quickly. 

A container can typically be built in just a few seconds and starting a container simply consists of starting the service’s process(es).

Docker runs on a variety of platforms. 

It runs natively on Linux. You can also run Docker on Windows and Mac OSX using Boot2Docker. 

Some clouds also have added extra support for Docker. For example, not only can you run Docker inside your EC2 instances but you can also use Elastic Beanstalk to run Docker containers. Amazon also recently announced the Amazon EC2 Container Service, which is a hosted Docker container management service.  Google Cloud also has support for Docker.

The two main Docker concepts are:

- image, which is a portable application packaging format
- and container, which is a running image and consists of one or more sandboxed processes. 

## Docker images

A Docker image is read-only file system image of an operating system and an application.

An image is self-contained and will run on any Docker installation. 
You can create an image from scratch but normally an image is created by starting a container from existing base image, installing applications by executing the same kinds of commands you would use when configuring a regular machine, such as apt-get install –y and then saving the container as a new image. 

For example, to create an image containing a Spring Boot based application, you could start from a vanilla Ubuntu image, install the JDK and then install the executable JAR.

## Docker containers

A Docker container is a running image consisting of one or more sandboxed processes. 

What we get with containers?

- Isolation
    - process groups, namespaces, own root file-system
- Resource limits
    - memory, CPU
- Networking isolation

Docker container often only consists of the application’s processes.

## Spring Boot and Docker

Let’s now build a Docker image that runs the Spring Boot application. 

## Step 1 

### create the image Dockerfile

# Java app image Dockerfile
FROM java:7
COPY . /apps/spring_app
WORKDIR /apps/spring_app
EXPOSE 8080
CMD ["java", "-jar", "spring_app-0.0.1-SNAPSHOT.jar"]

## Step 2 
### build the image

docker build -t tdelev/spring_app 

## Step 3
### Pull database image
docker pull postgres

### Create data volume
docker create -v /var/lib/postgresql/data --name spring_app_data postgres:9.4

# Start database instance 
docker run --volumes-from spring_app_data --name spring_app_db -e POSTGRES_PASSWORD=thepassword -d -P postgres:9.4

# Run app
docker run --name spring_app_container --link spring_app_db:spring_app_db -p 8080:8080 -d tdelev/spring_app

# Connect to database instance
psql -h localhost -p 49155 -U postgres --password
